{"ast":null,"code":"var _jsxFileName = \"/home/adam/Documents/UofR/CSC211/NotificationFlow/components/MenuBar.js\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nvar Tab = createBottomTabNavigator();\nexport default function MenuBar(_ref) {\n  var _this = this;\n\n  var state = _ref.state,\n      descriptors = _ref.descriptors,\n      navigation = _ref.navigation;\n  return React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, state.routes.map(function (route, index) {\n    var options = descriptors[route.key].options;\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var isFocused = state.index === index;\n\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key\n      });\n\n      if (!isFocused && !event.defaultPrevented) {\n        navigation.navigate(route.name);\n      }\n    };\n\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n\n    return React.createElement(TouchableOpacity, {\n      accessibilityRole: \"button\",\n      accessibilityState: isFocused ? {\n        selected: true\n      } : {},\n      accessibilityLabel: options.tabBarAccessibilityLabel,\n      testID: options.tabBarTestID,\n      onPress: onPress,\n      onLongPress: onLongPress,\n      style: {\n        flex: 1\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: isFocused ? '#673ab7' : '#222'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    }, label));\n  }));\n}","map":{"version":3,"sources":["/home/adam/Documents/UofR/CSC211/NotificationFlow/components/MenuBar.js"],"names":["React","createBottomTabNavigator","Tab","MenuBar","state","descriptors","navigation","flexDirection","routes","map","route","index","options","key","label","tabBarLabel","undefined","title","name","isFocused","onPress","event","emit","type","target","defaultPrevented","navigate","onLongPress","selected","tabBarAccessibilityLabel","tabBarTestID","flex","color"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;;AAIA,SAASC,wBAAT,QAAyC,+BAAzC;AAEA,IAAMC,GAAG,GAAGD,wBAAwB,EAApC;AAeA,eAAe,SAASE,OAAT,OAAqD;AAAA;;AAAA,MAAlCC,KAAkC,QAAlCA,KAAkC;AAAA,MAA3BC,WAA2B,QAA3BA,WAA2B;AAAA,MAAdC,UAAc,QAAdA,UAAc;AAChE,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACI,MAAN,CAAaC,GAAb,CAAiB,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAAA,QAC1BC,OAD0B,GACdP,WAAW,CAACK,KAAK,CAACG,GAAP,CADG,CAC1BD,OAD0B;AAElC,QAAME,KAAK,GACTF,OAAO,CAACG,WAAR,KAAwBC,SAAxB,GACIJ,OAAO,CAACG,WADZ,GAEIH,OAAO,CAACK,KAAR,KAAkBD,SAAlB,GACAJ,OAAO,CAACK,KADR,GAEAP,KAAK,CAACQ,IALZ;AAOA,QAAMC,SAAS,GAAGf,KAAK,CAACO,KAAN,KAAgBA,KAAlC;;AAEA,QAAMS,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,UAAMC,KAAK,GAAGf,UAAU,CAACgB,IAAX,CAAgB;AAC5BC,QAAAA,IAAI,EAAE,UADsB;AAE5BC,QAAAA,MAAM,EAAEd,KAAK,CAACG;AAFc,OAAhB,CAAd;;AAKA,UAAI,CAACM,SAAD,IAAc,CAACE,KAAK,CAACI,gBAAzB,EAA2C;AACzCnB,QAAAA,UAAU,CAACoB,QAAX,CAAoBhB,KAAK,CAACQ,IAA1B;AACD;AACF,KATD;;AAWA,QAAMS,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBrB,MAAAA,UAAU,CAACgB,IAAX,CAAgB;AACdC,QAAAA,IAAI,EAAE,cADQ;AAEdC,QAAAA,MAAM,EAAEd,KAAK,CAACG;AAFA,OAAhB;AAID,KALD;;AAOA,WACE,oBAAC,gBAAD;AACE,MAAA,iBAAiB,EAAC,QADpB;AAEE,MAAA,kBAAkB,EAAEM,SAAS,GAAG;AAAES,QAAAA,QAAQ,EAAE;AAAZ,OAAH,GAAwB,EAFvD;AAGE,MAAA,kBAAkB,EAAEhB,OAAO,CAACiB,wBAH9B;AAIE,MAAA,MAAM,EAAEjB,OAAO,CAACkB,YAJlB;AAKE,MAAA,OAAO,EAAEV,OALX;AAME,MAAA,WAAW,EAAEO,WANf;AAOE,MAAA,KAAK,EAAE;AAAEI,QAAAA,IAAI,EAAE;AAAR,OAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAEb,SAAS,GAAG,SAAH,GAAe;AAAjC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGL,KADH,CATF,CADF;AAeD,GA5CA,CADH,CADF;AAiDD","sourcesContent":["import * as React from 'react';\nimport { Text, View, StyleSheet, Image } from 'react-native';\n\n\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nconst Tab = createBottomTabNavigator();\n\n// export default function MenuBar() {\n//   return (\n//     <Tab.Navigator>\n//       <Tab.Screen name=\"Important\" component={} />\n//       <Tab.Screen name=\"Unimportant\" component={} />\n//       <Tab.Screen name=\"Settings\" component={} />\n//     </Tab.Navigator>\n//   );\n// }\n\n\n\n\nexport default function MenuBar({ state, descriptors, navigation }) {\n    return (\n      <View style={{ flexDirection: 'row' }}>\n        {state.routes.map((route, index) => {\n          const { options } = descriptors[route.key];\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n  \n          const isFocused = state.index === index;\n  \n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n            });\n  \n            if (!isFocused && !event.defaultPrevented) {\n              navigation.navigate(route.name);\n            }\n          };\n  \n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n  \n          return (\n            <TouchableOpacity\n              accessibilityRole=\"button\"\n              accessibilityState={isFocused ? { selected: true } : {}}\n              accessibilityLabel={options.tabBarAccessibilityLabel}\n              testID={options.tabBarTestID}\n              onPress={onPress}\n              onLongPress={onLongPress}\n              style={{ flex: 1 }}\n            >\n              <Text style={{ color: isFocused ? '#673ab7' : '#222' }}>\n                {label}\n              </Text>\n            </TouchableOpacity>\n          );\n        })}\n      </View>\n    );\n  }"]},"metadata":{},"sourceType":"module"}